//with 1 ms execution time
class Solution {
    public int[] getNoZeroIntegers(int n) {
        //map<Integer, Integer> resultHash= new HashMap<>();
        for (int i=1; i<n; ++i){
            int complement=n-i;
            
        if (
                !String.valueOf(i).contains("0") &&
                !String.valueOf(complement).contains("0")
            ) {
                return new int[] {i,complement};
            }
        }
return new int[0];
    }
}

//with 0 ms 

/*
class Solution {
    public int[] getNoZeroIntegers(int n) {
        int res[]=new int[2];
        for(int i=1;i<n;i++)
        {
            if(check(i) && check(n-i))
            {
                res[0]=i;
                res[1]=n-i;
                return res;
            }
        }
        return res;
    }
    public boolean check(int i)
    {
        while(i>0)
        {
            int temp=i%10;
            if(temp==0) return false;
            i/=10;
        }
        return true;
    }
}
*/

//return all key value pairs
/*
import java.util.*;

class Solution {
    public int[][] getNoZeroIntegers(int n) {
        Map<Integer, Integer> resultHash = new HashMap<>();

        // Build all key-value pairs
        for (int i = 1; i < n; ++i) {
            int complement = n - i;
            resultHash.put(i, complement);
        }

        // Convert map entries into a 2D array
        int[][] result = new int[resultHash.size()][2];
        int index = 0;
        for (Map.Entry<Integer, Integer> entry : resultHash.entrySet()) {
            result[index][0] = entry.getKey();   // key
            result[index][1] = entry.getValue(); // value
            index++;
        }

        return result;
    }

    // For quick testing
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] pairs = sol.getNoZeroIntegers(5);

        for (int[] pair : pairs) {
            System.out.println(pair[0] + " , " + pair[1]);
        }
    }
}

*/
